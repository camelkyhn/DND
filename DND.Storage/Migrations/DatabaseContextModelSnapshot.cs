// <auto-generated />
using System;
using DND.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DND.Storage.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DND.Middleware.Entities.Identity.Permission", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.Role", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<short>("PermissionId")
                        .HasColumnType("smallint");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AccessFailedCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("DND.Middleware.Entities.System.EntityHistoryRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("JsonValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EntityHistoryRecord");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.Permission", b =>
                {
                    b.HasOne("DND.Middleware.Entities.Identity.User", "CreatorUser")
                        .WithMany("CreatedPermissions")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "DeleterUser")
                        .WithMany("DeletedPermissions")
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "LastModifierUser")
                        .WithMany("ModifiedPermissions")
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.Role", b =>
                {
                    b.HasOne("DND.Middleware.Entities.Identity.User", "CreatorUser")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "DeleterUser")
                        .WithMany("DeletedRoles")
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "LastModifierUser")
                        .WithMany("ModifiedRoles")
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.RolePermission", b =>
                {
                    b.HasOne("DND.Middleware.Entities.Identity.User", "CreatorUser")
                        .WithMany("CreatedRolePermissions")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "DeleterUser")
                        .WithMany("DeletedRolePermissions")
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "LastModifierUser")
                        .WithMany("ModifiedRolePermissions")
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND.Middleware.Entities.Identity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.User", b =>
                {
                    b.HasOne("DND.Middleware.Entities.Identity.User", "CreatorUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "DeleterUser")
                        .WithMany("DeletedUsers")
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "LastModifierUser")
                        .WithMany("ModifiedUsers")
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("DND.Middleware.Entities.Identity.User", "CreatorUser")
                        .WithMany("CreatedUserRoles")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "DeleterUser")
                        .WithMany("DeletedUserRoles")
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.User", "LastModifierUser")
                        .WithMany("ModifiedUserRoles")
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("DND.Middleware.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND.Middleware.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DND.Middleware.Entities.Identity.User", b =>
                {
                    b.Navigation("CreatedPermissions");

                    b.Navigation("CreatedRolePermissions");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedUserRoles");

                    b.Navigation("CreatedUsers");

                    b.Navigation("DeletedPermissions");

                    b.Navigation("DeletedRolePermissions");

                    b.Navigation("DeletedRoles");

                    b.Navigation("DeletedUserRoles");

                    b.Navigation("DeletedUsers");

                    b.Navigation("ModifiedPermissions");

                    b.Navigation("ModifiedRolePermissions");

                    b.Navigation("ModifiedRoles");

                    b.Navigation("ModifiedUserRoles");

                    b.Navigation("ModifiedUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
